/*
    rectangles are axis paralleled, this made it easy to check if it's inside or not
*/

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
typedef complex<long double> point;
#define sz(a) ((int)(a).size())
#define all(n) (n).begin(),(n).end()
#define EPS 1e-9
#define OO 1e9
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define polar(r,t) ((r)*exp(point(0,(t))))
#define angle(v) (atan2((v).Y,(v).X))
#define length(v) ((long double)hypot((v).Y,(v).X))
#define lengthSqr(v) (dot(v,v))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define rotate(v,t) (polar(v,t))
#define rotateabout(v,t,a) (rotate(vec(a,v),t)+(a))
#define reflect(p,m) ((conj((p)/(m)))*(m))
#define normalize(p) ((p)/length(p))
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define mid(a,b) (((a)+(b))/point(2,0))
#define perp(a) (point(-(a).Y,(a).X))
#define colliner pointOnLine
enum STATE {
IN, OUT, BOUNDRY
};
struct rec
{
    double minX , maxX , minY , maxY;
}rec[20];

int main()
{
    char c;
    int n = 0;
    while(1)
    {
        cin>>c;
        if(c=='*') break;
        double a,b,c,d;
        cin>>a>>b>>c>>d;
        rec[n].minX = min(a,c) , rec[n].maxX = max(a,c);
        rec[n].minY = min(b,d) , rec[n++].maxY = max(b,d);
    }
    int j = 1;
    double x,y;
    while(1)
    {
        cin>>x>>y;
        if(x == 9999.9 && y==9999.9) break;
        bool f = 0;
        for(int i = 0 ; i<n ; ++i)
        {
            if(x>rec[i].minX && x<rec[i].maxX && y>rec[i].minY && y < rec[i].maxY)
            {
                printf("Point %d is contained in figure %d\n" , j , i+1);
                f = 1;
            }
        }
        if(!f) printf("Point %d is not contained in any figure\n" , j);
        j++;
    }
    return 0;
}
