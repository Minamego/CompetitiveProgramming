/*
straight forward 2D BIT problem
*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define MAXN 1024
long long BIT[MAXN+1][MAXN+1] , MAT[MAXN+1][MAXN+1];
void updateBIT(int x ,int y ,int n , int m ,long long val)
{
    int j = y;
    int a =  MAT[x][y];
     MAT[x][y] = val;
     val = val - a;

    for(; x<=n ; x += (x & -x))
        for(y = j; y<=m ; y+=(y&-y))
            BIT[x][y]+=val;

}
long long getSum(int x ,int y )
{
    long long sum = 0;
    int j = y;
    for(; x>0 ; x -= (x & -x))
        for(y = j; y>0 ; y-=(y& -y))
           sum+= BIT[x][y];
    return sum;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        memset(BIT , 0 , sizeof BIT);
        memset(MAT , 0 , sizeof MAT);
        int n;
        scanf("%d" , &n);

        while(1)
        {
            char s[4];
            scanf("%s" , s);
            if(!strcmp(s , "END")) break;
            if(!strcmp(s , "SET"))
            {

                int x,y,val;
                scanf("%d%d%d" , &x , &y , &val);
                x++,y++;
                updateBIT(x,y,n,n,val);
            }
            else
            {

                int x1,y1,x2,y2;
                scanf("%d%d%d%d" , &x1 , &y1 , &x2 , &y2);
                x1++,x2++,y1++,y2++;
                printf("%lld\n" , getSum(x2,y2) - getSum(x2,y1-1) - getSum(x1-1,y2) + getSum(x1-1,y1-1));
            }
        }
        printf("\n");
    }
    return 0;
}
